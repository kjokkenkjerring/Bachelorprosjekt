import libjevois as jevois # Importerer Jevois modulen
import cv2                 # Imoporterer Computer vision modulen
import numpy as np         
import cv2.aruco as aruco  # Importer ArUco-modulen

# @author Jorgen
# 
# @videomapping YUYV 640 480 30 YUYV 640 480 30 Yawcontrol Yawcontrol # Kameraparametere med tittelen Yawcontrol
# @email jak008@uit.no
# @copyright Copyright (C) 2018 by Jorgen
# @license GPL v3
# @distribution Unrestricted
# @restrictions None
# @ingroup modules

class Yawcontrol:
    def __init__(self):
        self.prev_gray = None
        self.prev_points = None
        self.reference_x = None  # Nullpunkt for yaw-offset
        self.feature_params = dict(maxCorners=100, qualityLevel=0.3, minDistance=7, blockSize=7)
        self.lk_params = dict(winSize=(15, 15), maxLevel=2,
                              criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

    def find_aruco_marker(self, img):
        try:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_50) # Bestemmer hvilket aruco bibliotek den skal se etter. Her en 4x4 som har 50 modeller
            parameters = cv2.aruco.DetectorParameters()

            corners, ids, _ = cv2.aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

            if ids is not None and len(ids) > 0:
                for i in range(len(ids)):
                    x_pos = int(corners[i][0][0][0])  # X-koordinaten til venstre hjorne
                    
                    # 3D-koordinater til markorens hjorner (standard 100mm storrelse)
                    marker_size = 0.1  # Storrelse til markoren (10 cm)
                    obj_points = np.array([		# Setter opp antall punkter paa markoren den skal se etter
                        [-marker_size / 2,  marker_size / 2, 0],
                        [ marker_size / 2,  marker_size / 2, 0],
                        [ marker_size / 2, -marker_size / 2, 0],
                        [-marker_size / 2, -marker_size / 2, 0]
                    ], dtype=np.float32)

                    # Kameraets iboende
                    camera_matrix = np.array([
                        [800, 0, img.shape[1] // 2],  # Fokal lengde horisontal, 0, Senter X
                        [0, 800, img.shape[0] // 2],  # 0, Fokal lengde vertikal, Senter Y
                        [0, 0, 1]
                    ], dtype=np.float32)

                    dist_coeffs = np.zeros((4, 1))  # Antar ingen linseforvrengning

                    # Beregner rotasjon og translasjon
                    success, rvec, tvec = cv2.solvePnP(obj_points, corners[i], camera_matrix, dist_coeffs)

                    if success: 
                        # Konverter rotasjonsvektor til rotasjonsmatrise
                        R, _ = cv2.Rodrigues(rvec)

                        # Henter ut yaw (rotasjon rundt Z-aksen)
                        yaw = np.degrees(np.arctan2(R[1, 0], R[0, 0]))


                        # Tegn markorens posisjon og yaw-verdi paa bildet (Brukes til feilsoking og lettere visuell sjekk av rotasjon)
                        pts = corners[i][0].astype(int)
                        cv2.polylines(img, [pts], isClosed=True, color=(255, 0, 0), thickness=3)
                        cv2.putText(img, f"Yaw: {yaw:.2f}", (pts[0][0], pts[0][1] - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

                        return x_pos, pts, yaw  # Returnerer ogsaa yaw-verdi

        except Exception as e:
            jevois.sendSerial(f"Error in find_aruco_marker: {str(e)}")

        return None, None, None

    def process(self, inframe, outframe):
        try:
            img = inframe.getCvBGR()
            if img is None:
                jevois.sendSerial("Error: Received None from inframe.getCvBGR()")
                return

            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

            # Finner ArUco-markor i bildet
            marker_x, marker_corners, marker_yaw = self.find_aruco_marker(img)

            if marker_x is not None and self.reference_x is None:
                self.reference_x = marker_x
                jevois.sendSerial(f"Referansepunkt satt til: {self.reference_x}")

            if marker_yaw is not None:
                jevois.sendSerial(f"Marker Yaw: {marker_yaw:.2f} grader") # Sender ut yaw-offset i UART format

                # Viser yaw paa skjermen
                cv2.putText(img, f"Marker Yaw: {marker_yaw:.2f}", (10, 80),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

            if self.prev_gray is None or self.prev_points is None:
                self.prev_gray = gray
                self.prev_points = cv2.goodFeaturesToTrack(gray, mask=None, **self.feature_params)
                outframe.sendCv(img)
                return

            # Tegner den rode markoren kun hvis ArUco-markoren er funnet
            if marker_corners is not None:
                center_x = int(np.mean(marker_corners[:, 0]))
                center_y = int(np.mean(marker_corners[:, 1]))
                img = cv2.circle(img, (center_x, center_y), 10, (0, 0, 255), -1)

            outframe.sendCv(img)

        except Exception as e:
            jevois.sendSerial(f"Error in process: {str(e)}")
            outframe.sendCv(inframe.getCvBGR())  # Returnerer originalbildet ved feil
